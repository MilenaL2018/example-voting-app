# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
   This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
     
      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
        
     # - name: Build result
     #   run: docker build -t milelucero98/result:latest ./result
     #   
     # - name: Push result
     #   run: docker push milelucero98/result:latest
     #   
      - name: Build vote
        run: docker build -t milelucero98/vote:latest ./vote
      
      - name: Push vote
        run: docker push milelucero98/vote:latest
      #
      #- name: Build worker 
      #  run: docker build -t milelucero98/worker:latest ./worker
      #  
      #- name: Push worker
      #  run: docker push milelucero98/worker:latest
  #   #   
  #deployVote:
  #  name: Deploy Vote in Heroku
  #  runs-on: ubuntu-latest
  #  needs: [build]
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Login to Heroku Container registry
  #      env: 
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: heroku container:login 
  #    - name: Setting Vars
  #      env: 
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: |
  #        heroku config:set REDIS_PORT=${{ secrets.REDIS_PORT }} -a example-voting-app-vote
  #        heroku config:set REDIS_HOST=${{ secrets.REDIS_HOST }} -a example-voting-app-vote
  #        heroku config:set REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} -a example-voting-app-vote
  #    - name: Build and Push
  #      env:
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: |
  #        cd ./vote
  #        heroku container:push -a example-voting-app-vote web
  #    - name: Release
  #      env:
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: heroku container:release -a example-voting-app-vote web
#
  Testing_vote:
      runs-on: ubuntu-latest
      needs: [build]
  
      steps:
        - uses: actions/checkout@v2
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.7'
        - name: Install dependencies
          run: |
            cd ./vote
            pip install -r requirements.txt
        - name: PyTest
          run: python -m pytest ./vote/tests --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
  
        - name: Upload Unit Test Results
          uses: actions/upload-artifact@v2
          with:
            name: Unit Test Results
            path: junit/test-results.xml
          if: always() 
        - name: Publish Unit Test Results
          uses: EnricoMi/publish-unit-test-result-action@v1.4
          if: always()
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            check_name: Unit Test Results
            comment_title: Unit Test Statistics
            hide_comments: all but latest
            comment_on_pr: true
            files: junit/test-results.xml
            report_individual_runs: true
            deduplicate_classes_by_file_name: false
  
  #deployResult:
  # name: Deploy Result in Heroku
  # runs-on: ubuntu-latest
  # needs: [build]
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Login to Heroku Container registry
  #      env: 
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: heroku container:login 
  #    - name: Setting Vars
  #      env: 
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: heroku config:set POSTGRES_URI=${{ secrets.POSTGRES_URI }} -a example-voting-app-result
  #    - name: Build and Push
  #      env:
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: |
  #        cd ./result
  #        heroku container:push -a example-voting-app-result web
  #    - name: Release
  #      env:
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: heroku container:release -a example-voting-app-result web
  #
  #it-result:
  #  name: Integration Test
  #  runs-on: ubuntu-latest
  #  needs: [deployResult, deployVote]
  #  steps:
  #    - uses: actions/checkout@v2
  #    - name: Building
  #      run: |
  #        cd ./integration-test
  #        npm install
  #    - name: testing
  #      run: |
  #        cd ./integration-test
  #        npx codeceptjs run --steps --reporter mocha-multi
  #    - name: Publish Integration Test Results
  #      uses: EnricoMi/publish-unit-test-result-action@v1.4
  #      if: always()
  #      with:
  #        github_token: ${{ secrets.GITHUB_TOKEN }}
  #        check_name: Integration Test Result
  #        comment_title: Integration Test Statistics
  #        hide_comments: all but latest
  #        comment_on_pr: true
  #        files: junit/result.xml
  #        report_individual_runs: true
  #        deduplicate_classes_by_file_name: false
  #
  ##deployWorker:
  ##  name: Deploy Worker in Heroku
  ##  runs-on: ubuntu-latest
  ##  #needs: [build, deployResult]
  ##  steps:
  ##    - uses: actions/checkout@v2
  ##    - name: Login to Heroku Container registry
  ##      env: 
  ##        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  ##      run: heroku container:login
  #    - name: Configuration 
  #      env: 
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: |
  #        heroku config:set POSTGRES_PORT=${{ secrets.POSTGRES_PORT  }} -a example-voting-app-worker
  #        heroku config:set POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE  }} -a example-voting-app-worker
  #        heroku config:set POSTGRES_HOST=${{ secrets.POSTGRES_HOST  }} -a example-voting-app-worker
  #        heroku config:set POSTGRES_USER=${{ secrets.POSTGRES_USER  }} -a example-voting-app-worker
  #        heroku config:set POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASS  }} -a example-voting-app-worker
  #        heroku config:set REDIS_PORT=${{ secrets.REDIS_PORT }} -a example-voting-app-worker
  #        heroku config:set REDIS_HOST=${{ secrets.REDIS_HOST }} -a example-voting-app-worker
  #        heroku config:set REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} -a example-voting-app-worker
  #    - name: Build and Push
  #      env:
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: |
  #        cd ./worker
  #        heroku container:push -a example-voting-app-worker web
  #    - name: Release
  #      env:
  #        HEROKU_API_KEY: ${{ secrets.HEROKU_API }}
  #      run: heroku container:release -a example-voting-app-worker web
  
  
  
      
      
        

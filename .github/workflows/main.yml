# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
     
      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
        
      - name: Build result
        run: docker build -t milelucero98/result:latest ./result
        
      - name: Push result
        run: docker push milelucero98/result:latest
        
      - name: Build vote
        run: docker build -t milelucero98/vote:latest ./vote
      
      - name: Push vote
        run: docker push milelucero98/vote:latest
      
      - name: Build worker 
        run: docker build -t milelucero98/worker:latest ./worker
        
      - name: Push worker
        run: docker push milelucero98/worker:latest
  #
  ##unit_testing:
   # runs-on: ubuntu-latest
   # steps:
   #   - uses: actions/checkout@v2
   #  
   #   - name: Test Worker
   #     run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
   #   
   #   - name: Test Vote
   #     run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
  #
  
  deploy_worker:
      name: Delpoy Worker in Heroku
      runs-on: ubuntu-latest
      needs: [build] # in the future this needs a testing
      steps:
        - uses: actions/checkout@v2
        - uses: akhileshns/heroku-deploy@v3.6.8
          with:
            heroku_api_key: ${{secrets.HEROKU_API}}
            heroku_app_name: 'example-voting-app-worker'
            heroku_email: ${{ secrets.HEROKU_EMAIL }}
            appdir: "worker"

  deploy_result:
      name: Delpoy Result in Heroku
      runs-on: ubuntu-latest
      needs: [build] # in the future this needs a testing
      steps:
        - uses: actions/checkout@v2
        - uses: akhileshns/heroku-deploy@v3.6.8
          with:
            heroku_api_key: ${{secrets.HEROKU_API}}
            heroku_app_name: 'example-voting-app-result'
            heroku_email: ${{ secrets.HEROKU_EMAIL }}
            appdir: "result"

  deploy_vote:
      name: Delpoy Vote in Heroku
      runs-on: ubuntu-latest
      needs: [build] # in the future this needs a testing
      steps:
        - uses: actions/checkout@v2
        - uses: akhileshns/heroku-deploy@v3.6.8
          with:
            heroku_api_key: ${{secrets.HEROKU_API}}
            heroku_app_name: 'example-voting-app-vote'
            heroku_email: ${{ secrets.HEROKU_EMAIL }}
            appdir: "vote"
  
  ##testing:
    #runs-on: ubuntu-latest
    #  - name: Archive code coverage results
    #    uses: actions/upload-artifact@v2
    #    with:
    #      name: integration-test-report
    #      path: output/result.xml
    #  
    #  - name: SonarCloud Scan
    #    uses: SonarSource/sonarcloud-github-action@master
    #    env:
    #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
    #      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #  
       
       
          
